# make row names a column
mutate(genotype = rownames(exp)) %>%
# make each row a single measurement
gather(key = sample, value = measurement, -genotype) %>%
# make each column a single variable
separate(col = sample, into = c("experiment", "replicate"), sep = "_")
clean <- raw %>%
# calculate mean of technical replicates
group_by(genotype, experiment) %>%
summarise(measurement = mean(measurement)) %>%
ungroup()
mod <- clean %>%
# anova and post-hoc tests
mutate(genotype = relevel(factor(genotype), ref = "wt")) %>%
do(tidy(TukeyHSD(aov(measurement ~ genotype, .))))
tidy <- data.frame(exp) %>%
# make row names a column
mutate(genotype = rownames(exp)) %>%
# make each row a single measurement
gather(key = sample, value = measurement, -genotype) %>%
# make each column a single variable
separate(col = sample, into = c("experiment", "replicate"), sep = "_")
data <- tidy %>%
# calculate mean of technical replicates
group_by(genotype, experiment) %>%
summarise(measurement = mean(measurement)) %>%
ungroup()
mod <- data %>%
# anova and post-hoc tests
mutate(genotype = relevel(factor(genotype), ref = "wt")) %>%
do(tidy(TukeyHSD(aov(measurement ~ genotype, .))))
ggplot(data, aes(x = genotype, y = measurement, col = experiment)) +
geom_point(shape = 16, size = 3) +
stat_summary(fun.y = "mean", geom = "point", color = "black", shape = 3, size = 3) +
stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", color = "black", width = 0.1, alpha = 0.5) +
theme_bw()
set.seed(1)
messy <- matrix(rnorm(36, mean = c(20, 25, 21, 30), sd = rep(c(1, 2, 1, 3, 2, 3, 1, 1, 1), each = 4)), nrow = 4)
rownames(messy) <- c("wt", "myc", "ras", "myc ras")
colnames(messy) <- paste(rep(paste0("exp", 1:3), each = 3), paste0("rep", 1:3), sep = "_")
set.seed(2)
messy <- matrix(rnorm(36, mean = c(20, 25, 21, 30), sd = rep(c(1, 2, 1, 3, 2, 3, 1, 1, 1), each = 4)), nrow = 4)
rownames(messy) <- c("wt", "myc", "ras", "myc ras")
colnames(messy) <- paste(rep(paste0("exp", 1:3), each = 3), paste0("rep", 1:3), sep = "_")
#
tidy <- data.frame(messy) %>%
# make row names a column
mutate(genotype = rownames(messy)) %>%
# make each row a single measurement
gather(key = sample, value = measurement, -genotype) %>%
# make each column a single variable
separate(col = sample, into = c("experiment", "replicate"), sep = "_")
data <- tidy %>%
# calculate mean of technical replicates
group_by(genotype, experiment) %>%
summarise(measurement = mean(measurement)) %>%
ungroup()
mod <- data %>%
# anova and post-hoc tests
mutate(genotype = relevel(factor(genotype), ref = "wt")) %>%
do(tidy(TukeyHSD(aov(measurement ~ genotype, .))))
ggplot(data, aes(x = genotype, y = measurement, col = experiment)) +
geom_point(shape = 16, size = 3) +
stat_summary(fun.y = "mean", geom = "point", color = "black", shape = 3, size = 3) +
stat_summary(fun.data = "mean_cl_normal", geom = "errorbar", color = "black", width = 0.1, alpha = 0.5) +
theme_bw()
source('~/Desktop/work/qrtpcr.R', echo=TRUE)
mod
matrix(rnorm(n = 9), nrow = 3)
set.seed(1)
messy <- data.frame(matrix(rnorm(n = 9), nrow = 3))
messy
colnames(messy) <- paste0("replicate", 1:3)
messy
rm(list = ls())
set.seed(1)
messy <- matrix(rnorm(n = 9), nrow = 3)
colnames(messy) <- paste0("replicate", 1:3)
messy <- data.frame(gene = paste0("gene", LETTERS[1:3]), messy)
messy
library(tidyr)
tidy <- gather(messy, key = "replicate", value = "measurement", -gene)
tidy
rm(list = ls())
library(babel)
read.counts <- function(path, ...) {
read.table(file = path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
}
exvivo <- read.counts("~/Box Sync/collaborations/druggero/ex_vivo/counts/exvivo_counts.txt")
liverwt <- read.counts("~/Box Sync/collaborations/druggero/liver_wt/counts/counts.txt")
babel <- exvivo[, 7:14]
babel <- sweep(babel, 2, colSums(babel), "/") * 1e6
babel <- round(babel, 0)
babel <- sapply(babel, as.integer)
babel <- babel[apply(babel, 1, function(row) all(row > 0)), ]
# babel[1, ] <- c(1454, 1346, 342, 321, 1345, 1234, 20, 32)
group <- rep(rep(c("rna", "rp"), each = 2), 2)
babel <- lapply(split(t(babel), group), matrix, ncol = 4, byrow = TRUE)
# babel <- lapply(babel, matrix, dimnames = list(paste0("gene", 1:100), c("wt_1", "wt_2", "myc_1", "myc_2")))
dimnames(babel$rna) <- dimnames(babel$rp) <- list(paste0("gene", 1:100), c("wt_1", "wt_2", "myc_1", "myc_2"))
babel <- lapply(babel, data.frame)
lapply(babel, head)
str(babel)
genotype <- rep(c("wt", "myc"), each = 2)
res <- babel(babel$rna,
babel$rp,
group = genotype,
nreps = 1e5, min.rna = 10)
str(res)
between <- res$between
str(between)
hist(between$P-value)
hist(between$wt.vs.myc$P-value)
hist(between$wt.vs.myc$'P-value')
hist(between$wt.vs.myc$FDR)
sum(between$wt.vs.myc$FDR < 0.1)
sum(between$wt.vs.myc$FDR < 0.1, na.rm = T)
babel <- data.frame(liverwt[, 7:10], exvivo[, 7:14])
babel <- sweep(babel, 2, colSums(babel), "/") * 1e6
babel <- round(babel, 0)
babel <- sapply(babel, as.integer)
babel <- babel[apply(babel, 1, function(row) all(row > 0)), ]
group <- c(rep("rp", "rna"), each = 2), rep(rep(c("rna", "rp"), each = 2), 2)
group <- c(rep(c("rp", "rna"), each = 2), rep(rep(c("rna", "rp"), each = 2), 2)
group <- c(rep(c("rp", "rna"), each = 2), rep(rep(c("rna", "rp"), each = 2), 2))
group <- c(rep(c("rp", "rna"), each = 2), rep(rep(c("rna", "rp"), each = 2), 2))
group
dimnames(babel$rna) <- dimnames(babel$rp) <- list(paste0("gene", 1:100), c("wt_1", "wt_2", "myc_1", "myc_2"))
babel <- lapply(split(t(babel), group), matrix, ncol = 6, byrow = TRUE)
# babel <- lapply(babel, matrix, dimnames = list(paste0("gene", 1:100), c("wt_1", "wt_2", "myc_1", "myc_2")))
dimnames(babel$rna) <- dimnames(babel$rp) <- list(paste0("gene", 1:100), c("wt_1", "wt_2", "myc_1", "myc_2"))
head(babel)
babel <- data.frame(liverwt[, 7:10], exvivo[, 7:14])
rownames(babel) <- exvivo[, 1]
babel <- sweep(babel, 2, colSums(babel), "/") * 1e6
babel <- round(babel, 0)
babel <- sapply(babel, as.integer)
babel <- babel[apply(babel, 1, function(row) all(row > 0)), ]
head(babel)
babel <- data.frame(liverwt[, 7:10], exvivo[, 7:14])
rownames(babel) <- exvivo[, 1]
babel <- sweep(babel, 2, colSums(babel), "/") * 1e6
babel <- round(babel, 0)
head(babel)
babel <- sapply(babel, as.integer)
head(babel)
babel <- data.frame(liverwt[, 7:10], exvivo[, 7:14])
rownames(babel) <- exvivo[, 1]
babel <- sweep(babel, 2, colSums(babel), "/") * 1e6
babel <- round(babel, 0)
idx <- apply(babel, 1, function(row) all(row > 0))
babel <- sapply(babel, as.integer)
babel <- babel[idx, ]
dimnames(babel$rna) <- dimnames(babel$rp) <- list(exvivo[idx, 1], c("liver_1", "liver_2", "wt_1", "wt_2", "myc_1", "myc_2"))
babel <- data.frame(liverwt[, 7:10], exvivo[, 7:14])
rownames(babel) <- exvivo[, 1]
babel <- sweep(babel, 2, colSums(babel), "/") * 1e6
babel <- round(babel, 0)
idx <- apply(babel, 1, function(row) all(row > 0))
babel <- sapply(babel, as.integer)
babel <- babel[idx, ]
# babel[1, ] <- c(1454, 1346, 342, 321, 1345, 1234, 20, 32)
group <- c(rep(c("rp", "rna"), each = 2), rep(rep(c("rna", "rp"), each = 2), 2))
babel <- lapply(split(t(babel), group), matrix, ncol = 6, byrow = TRUE)
# babel <- lapply(babel, matrix, dimnames = list(paste0("gene", 1:100), c("wt_1", "wt_2", "myc_1", "myc_2")))
dimnames(babel$rna) <- dimnames(babel$rp) <- list(exvivo[idx, 1], c("liver_1", "liver_2", "wt_1", "wt_2", "myc_1", "myc_2"))
babel <- lapply(babel, data.frame)
lapply(babel, head)
str(babel)
genotype <- rep(c("liver", "wt", "myc"), each = 2)
genotype
res <- babel(babel$rna,
babel$rp,
group = genotype,
nreps = 1e5, min.rna = 10)
btw <- res$between
str(btw)
lapply(btw, function(df) hist(df$FDR))
lapply(btw, function(df) hist(df$P-value))
lapply(btw, function(df) hist(df$`P-value`))
# ------------------------------------------------------------------------
# libraries
# ------------------------------------------------------------------------
rm(list = ls())
library(dplyr)
library(tidyr)
library(stringr)
# library(EBSeq)
path <- "~/Box Sync/collaborations/druggero/counts/"
setwd(path)
# ------------------------------------------------------------------------
# simulation of additional samples
# ------------------------------------------------------------------------
# define count read function
read.counts <- function(path, ...) {
read.table(file = path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
}
# read counts from featureCounts output
counts <- read.counts("count_table_raw.txt")
# read samples file
samples <- read.counts("../samples.txt")
# lib_size <- colSums(counts)
#
# data <- counts %>%
#   mutate(genes = rownames(counts)) %>%
#   gather(key = "genotype", value = "count", -genes) %>%
#   mutate(genotype = str_replace(genotype, "_1|_2", "")) %>%
#   group_by(genotype, genes) %>%
#   summarize(count = mean(count))
#
# head(data)
library(DESeq2)
# normalize counts for rna and rp separately
norm_counts <- list()
for (type in c("rna", "rp")) {
c <- counts[, samples$type == type]
g <- factor(samples$genotype[samples$type == type])
cds <- DESeqDataSetFromMatrix(c, DataFrame(g), ~ g)
cds <- estimateSizeFactors(cds)
cn <- t(t(counts(cds)) / sizeFactors(cds))
cn <- round(cn, 0)
norm_counts[[type]] <- data.frame(cn)
}
norm_counts <- bind_cols(norm_counts)
head(data.frame(norm_counts))
set.seed(1)
data <- norm_counts %>%
mutate(genes = rownames(counts)) %>%
gather(key = "genotype", value = "count", -genes) %>%
mutate(genotype = str_replace(genotype, "_1|_2", "")) %>%
group_by(genotype, genes) %>%
summarize(count = rpois(1, mean(count))) %>%
#  summarize(count = mean(count)) %>%
spread(key = genotype, value = count)
rownames(data) <- data$genes
data <- select(data, -genes)
set.seed(1)
data <- norm_counts %>%
mutate(genes = rownames(counts)) %>%
gather(key = "genotype", value = "count", -genes) %>%
mutate(genotype = str_replace(genotype, "_1|_2", "_3")) %>%
group_by(genotype, genes) %>%
summarize(count = rpois(1, mean(count))) %>%
#  summarize(count = mean(count)) %>%
spread(key = genotype, value = count)
head(data)
head(norm_counts)
colSums(data)
colSums(data[, -1])
colSums(norm_counts)
head(norm_counts)
head(rownames(counts))
norm_counts <- list()
for (type in c("rna", "rp")) {
c <- counts[, samples$type == type]
g <- factor(samples$genotype[samples$type == type])
cds <- DESeqDataSetFromMatrix(c, DataFrame(g), ~ g)
cds <- estimateSizeFactors(cds)
cn <- t(t(counts(cds)) / sizeFactors(cds))
cn <- round(cn, 0)
norm_counts[[type]] <- data.frame(cn)
}
norm_counts <- bind_cols(norm_counts)
norm_counts <- mutate(norm_counts, genes = rownames(counts))
head(data.frame(norm_counts))
c <- inner_join(norm_counts, data, by = "genes")
head(c)
head(data.frame(c))
head(data.frame(c[, sort(names(c))]))
# ------------------------------------------------------------------------
# libraries
# ------------------------------------------------------------------------
rm(list = ls())
library(dplyr)
library(tidyr)
library(stringr)
# library(EBSeq)
path <- "~/Box Sync/collaborations/druggero/counts/"
setwd(path)
# ------------------------------------------------------------------------
# simulation of additional samples
# ------------------------------------------------------------------------
# define count read function
read.counts <- function(path, ...) {
read.table(file = path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
}
# read counts from featureCounts output
counts <- read.counts("count_table_raw.txt")
# read samples file
samples <- read.counts("../samples.txt")
# lib_size <- colSums(counts)
#
# data <- counts %>%
#   mutate(genes = rownames(counts)) %>%
#   gather(key = "genotype", value = "count", -genes) %>%
#   mutate(genotype = str_replace(genotype, "_1|_2", "")) %>%
#   group_by(genotype, genes) %>%
#   summarize(count = mean(count))
#
# head(data)
library(DESeq2)
# normalize counts for rna and rp separately
norm_counts <- list()
for (type in c("rna", "rp")) {
c <- counts[, samples$type == type]
g <- factor(samples$genotype[samples$type == type])
cds <- DESeqDataSetFromMatrix(c, DataFrame(g), ~ g)
cds <- estimateSizeFactors(cds)
cn <- t(t(counts(cds)) / sizeFactors(cds))
cn <- round(cn, 0)
norm_counts[[type]] <- data.frame(cn)
}
norm_counts <- bind_cols(norm_counts)
norm_counts <- mutate(norm_counts, genes = rownames(counts))
head(data.frame(norm_counts))
set.seed(1)
data <- norm_counts %>%
mutate(genes = rownames(counts)) %>%
gather(key = "genotype", value = "count", -genes) %>%
mutate(genotype = str_replace(genotype, "_1|_2", "_3")) %>%
group_by(genotype, genes) %>%
summarize(count = rpois(1, mean(count))) %>%
#  summarize(count = mean(count)) %>%
spread(key = genotype, value = count)
c <- inner_join(norm_counts, data, by = "genes")
head(data.frame(c[, sort(names(c))]))
head(samples)
names(counts)
if (!require(edgeR)) {
source("http://bioconductor.org/biocLite.R")
biocLite("edgeR")
library(edgeR)
}
source('~/Box Sync/collaborations/druggero/count_replicate_simulation.R', echo=TRUE)
genes_keep <- apply(c, 1, function(row) all(row > 0))
c <- c[genes_keep, ]
types <- str_extract(names(c), "rna|rp")
types
c <- data.frame(c[, -1])
head9c
head(c)
c <- inner_join(norm_counts, data, by = "genes")
head(c)
names(c)
c <- data.frame(c[, -c("genes")])
c <- subset(c, -genes)
c <- subset(c, select = -genes)
head(c)
rownames(c) <- rownames(counts)
head(c)
class(c)
genes_keep <- apply(c, 1, function(row) all(row > 0))
c <- c[genes_keep, ]
types <- str_extract(names(c), "rna|rp")
types
c <- inner_join(norm_counts, data, by = "genes")
c <- subset(c, select = -genes)
c <- c[, sort(names(c))]
rownames(c) <- rownames(counts)
genes_keep <- apply(c, 1, function(row) all(row > 0))
c <- c[genes_keep, ]
types <- str_extract(names(c), "rna|rp")
types
babel <- list()
babel$rna <- counts[, types == "rna"]
babel$rp <- counts[, types == "rp"]
babel <- list()
babel$rna <- counts[, types == "rna"]
babel$rp <- counts[, types == "rp"]
colnames(babel$rna) <- gsub("_rna", "", colnames(babel$rna))
colnames(babel$rp) <- gsub("_rp", "", colnames(babel$rp))
stopifnot(colnames(babel$rna) == colnames(babel$rp))
babel <- list()
babel$rna <- c[, types == "rna"]
babel$rp <- c[, types == "rp"]
colnames(babel$rna) <- gsub("_rna", "", colnames(babel$rna))
colnames(babel$rp) <- gsub("_rp", "", colnames(babel$rp))
str(babel)
stopifnot(colnames(babel$rna) == colnames(babel$rp))
stopifnot(samples$genotype[types == "rna"] == samples$genotype[types == "rp"])
colnames(babel$rp)
babel$group <- str_replace(colnames(babel$rna, "_[0:9]{1,2}", "")
)
babel$group <- str_replace(colnames(babel$rna), "_[0:9]{1,2}", "")
babel$group
babel$group <- str_replace(colnames(babel$rna), "_1|_2|_3", "")
babel$group
babel$group <- str_replace(colnames(babel$rna), "_[0:9]", "")
babel$group
babel$group <- str_replace(colnames(babel$rna), "_[0:9]$", "")
babel$group
babel$group <- str_replace(colnames(babel$rna), "_[0-9]$", "")
babel$group
library(babel)
res <- babel(babel$rna,
babel$rp,
babel$group,
nreps = 1e5)
c <- inner_join(norm_counts, data, by = "genes")
c <- subset(c, select = -genes)
c <- c[, sort(names(c))]
rownames(c) <- rownames(counts)
# ------------------------------------------------------------------------
# Babel input
# ------------------------------------------------------------------------
# filter out genes with low counts
genes_keep <- apply(c, 1, function(row) all(row > 0))
c <- c[genes_keep, ]
types <- str_extract(names(c), "rna|rp")
# make babel object
babel <- list()
babel$rna <- c[, types == "rna"]
babel$rp <- c[, types == "rp"]
colnames(babel$rna) <- gsub("_rna", "", colnames(babel$rna))
colnames(babel$rp) <- gsub("_rp", "", colnames(babel$rp))
stopifnot(colnames(babel$rna) == colnames(babel$rp))
babel$group <- str_replace(colnames(babel$rna), "_[0-9]$", "")
library(babel)
res <- babel(babel$rna,
babel$rp,
babel$group,
nreps = 1e5)
babel$group
colnames(babel$rna)
babel <- list()
babel$rna <- c[, types == "rna"]
babel$rp <- c[, types == "rp"]
lapply(babel, head)
babel$rna <- data.frame(c[, types == "rna"])
lapply(babel, head)
babel$rp <- data.frame(c[, types == "rp"])
colnames(babel$rna) <- gsub("_rna", "", colnames(babel$rna))
colnames(babel$rp) <- gsub("_rp", "", colnames(babel$rp))
stopifnot(colnames(babel$rna) == colnames(babel$rp))
babel$group <- str_replace(colnames(babel$rna), "_[0-9]$", "")
library(babel)
res <- babel(babel$rna,
babel$rp,
babel$group,
nreps = 1e5)
str(res)
lapply(res$between, function(x) sum(x$FDR < 0.1))
lapply(res$between, function(x) sum(x$FDR < 0.1, na.rm = TRUE))
save(res, file = "151206_babel_addrep.RData")
head(norm_counts)
d <- subset(norm_counts, select = -genes)
d <- d[, sort(names(d))]
rownames(d) <- rownames(counts)
head(d)
genes_keep <- apply(d, 1, function(row) all(row > 0))
d <- d[genes_keep, ]
types <- str_extract(names(d), "rna|rp")
babel <- list()
babel$rna <- data.frame(d[, types == "rna"])
babel$rp <- data.frame(d[, types == "rp"])
colnames(babel$rna) <- gsub("_rna", "", colnames(babel$rna))
colnames(babel$rp) <- gsub("_rp", "", colnames(babel$rp))
stopifnot(colnames(babel$rna) == colnames(babel$rp))
babel$group <- str_replace(colnames(babel$rna), "_[0-9]$", "")
babel$group
library(babel)
res2 <- babel(babel$rna,
babel$rp,
babel$group,
nreps = 1e5)
save(res2, file = "151206_babel_truerep.RData")
lapply(res2$between, function(x) sum(x$FDR < 0.1, na.rm = TRUE))
rm(list = ls())
setwd("~/Box Sync/bioramble/data_processing/")
library(tidyr)
library(reshape2)
library(dplyr)
library(ggplot2)
library(broom)
set.seed(321)
messy <- matrix(rnorm(27, mean = c(20, 25, 21), sd = rep(c(1, 2, 1, 3, 2, 3, 1, 1, 1), each = 3)), nrow = 3)
rownames(messy) <- c("control", "mutant1", "mutant2")
colnames(messy) <- paste(rep(paste0("exp", 1:3), each = 3), paste0("rep", 1:3), sep = "_")
options(digits = 4)
messy <- read.csv("qpcr_messy.csv", row.names = 1)
# messy
#
# # 1. sample identifiers are columns
# exp <- data.frame(genotype = rownames(exp), exp)
# rownames(exp) <- NULL
#
# # 2. each row is one observation
# exp.1 <- melt(exp, id.vars = "genotype", variable.name = "sample", value.name = "measurement")
# exp.2 <- gather(exp, key = sample, value = measurement, -genotype)
tidy <- messy %>%
# make row names a column
mutate(genotype = rownames(messy)) %>%
# make each row a single measurement
gather(key = sample, value = measurement, -genotype) %>%
# make each column a single variable
separate(col = sample, into = c("experiment", "replicate"), sep = "_")
tidy
data <- tidy %>%
# calculate mean of technical replicates by genotype and experiment
group_by(genotype, experiment) %>%
summarise(measurement = mean(measurement)) %>%
ungroup()
mod <- data %>%
# anova and post-hoc tests
mutate(genotype = relevel(factor(genotype), ref = "wt")) %>%
do(tidy(TukeyHSD(aov(measurement ~ genotype, .))))
data
mod <- data %>%
# anova and post-hoc tests
mutate(genotype = relevel(factor(genotype), ref = "control")) %>%
do(tidy(TukeyHSD(aov(measurement ~ genotype, .))))
mod
